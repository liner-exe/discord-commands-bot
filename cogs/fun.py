import asyncio

import nextcord
from nextcord.ext import commands
import random

import requests
import datetime
from datetime import timezone, timedelta
import math
import configparser

from embed.colors import Colors

config = configparser.ConfigParser()
config.read("config.ini")


class Fun(commands.Cog):
    def __init__(self, client):
        self.client = client

    @commands.command()
    async def dice(self, ctx):
        try:
            player_dice, bot_dice = [random.randint(2, 12) for _ in range(2)]

            if player_dice > bot_dice:
                result = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
                color = Colors.light_green

            elif bot_dice > player_dice:
                result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.."
                color = Colors.light_red

            elif bot_dice == player_dice:
                result = "–ù–∏—á—å—è.."
                color = Colors.teal

            embed = nextcord.Embed(title="–ö–æ—Å—Ç–∏", description="\n".join([f"–í—ã: {player_dice} üé≤",
                                                                         f"{self.client.user.display_name}: {bot_dice} üé≤\n",
                                                                         f"**–†–µ–∑—É–ª—å—Ç–∞—Ç**",
                                                                         f"{result}"]),
                                   colour=color
                                   )

            await ctx.send(embed=embed)

        except Exception as error:
            print(error)

    @commands.command(aliases=["slots"])
    async def roll(self, ctx):
        emojis = ["üçé", "üçä", "üçê", "üçã", "üçâ", "üçá", "üçì", "üçí", "üîî", "üíé", ":seven:"]

        a = random.choice(emojis)
        b = random.choice(emojis)
        c = random.choice(emojis)

        if a == b == c:
            color = 0x33ff00
            name, value = "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–±–µ–¥–∞!", f"–í—Å–µ 3 —Å–∏–º–≤–æ–ª–∞ —Å–æ–≤–ø–∞–ª–∏."

        elif (a == b) or (a == c) or (b == c):
            color = 0xffff00
            name, value = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!", "2 —Å–∏–º–≤–æ–ª–∞ —Å–æ–≤–ø–∞–ª–∏."

        else:
            color = 0xff0000
            name, value = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏..", "–ù–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ."

        slotmachine = nextcord.Embed(title="–°–ª–æ—Ç—ã", description=f"üé∞ ({a}|{b}|{c})", colour=color)
        slotmachine.add_field(name=name, value=value)
        await ctx.send(embed=slotmachine)

    @commands.command(aliases=["pass", "–ø–∞—Ä–æ–ª—å"])
    async def password(self, ctx, *, lenght: int = None):
        lower = 'abcdefghijklmnopqrstuvwxyz'
        upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        digits = '0123456789'
        punct = ';;<,>.?!@#$%'

        symbols = lower + upper + digits + punct

        if 8 <= lenght <= 74:
            pass
        elif lenght > 74:
            return await ctx.send("–ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 74 —Å–∏–º–≤–æ–ª–æ–≤.")
        else:
            return await ctx.send("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤.")

        password = ''.join(random.sample(symbols, lenght))
        embed = nextcord.Embed(
            title='Password generator',
            description=f'–í–∞—à —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–∞—Ä–æ–ª—å: ``{password}``',
            timestamp=ctx.message.created_at,
            colour=0x45fc03
        )
        embed.add_field(name='–í–Ω–∏–º–∞–Ω–∏–µ ‚ö†Ô∏è', value='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö.')
        await ctx.send(embed=embed)

    @commands.command()
    async def coin(self, ctx):
        array_coins = ['–û—Ä—ë–ª', '–†–µ—à–∫–∞']
        coin_flip = random.choice(array_coins)

        if coin_flip == '–û—Ä—ë–ª':
            description = f"–ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–¥–∫–∏–Ω—É—Ç–∞ –∏ –≤—ã–ø–∞–ª **{coin_flip}**."
        else:
            description = f"–ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–¥–∫–∏–Ω—É—Ç–∞ –∏ –≤—ã–ø–∞–ª–∞ **{coin_flip}**."

        embed = nextcord.Embed(description=description, colour=0xdf03fc)
        await ctx.send(embed=embed)

    @commands.command()
    async def say(self, ctx, *, sentence):
        embed = nextcord.Embed(
            description=f'{sentence}',
        )
        await ctx.send(embed=embed)
        await ctx.message.delete()

    @commands.command()
    async def reverse(self, ctx, *, sentence):
        await ctx.send(f"{sentence[::-1]}")

    @commands.command(name="–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    async def random(self, ctx, first_num: int = 0, *, second_num: int = 10):
        try:
            embed = nextcord.Embed(description=f"–ß–∏—Å–ª–æ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ **–æ—Ç {first_num} –¥–æ {second_num}**")
            embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value=f"{random.randint(first_num, second_num)}")
            await ctx.send(embed=embed)

        except Exception as error:
            print(error)

    @commands.command()
    async def guess(self, ctx):

        await ctx.reply("–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")

        try:
            number = await self.client.wait_for('message', check=lambda message: message.author == ctx.author,
                                                timeout=7)
            h_number = random.randint(1, 5)

        except asyncio.TimeoutError:
            await ctx.send("–í—Ä–µ–º—è –≤—ã—à–ª–æ... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        else:
            try:
                if int(number.content) == h_number and 1 <= int(number.content) <= 5:
                    color = Colors.light_green
                    result = f"**–í–´ –£–ì–ê–î–ê–õ–ò!**\n\n–í–∞—à–µ —á–∏—Å–ª–æ: {number.content}\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {h_number}"

                elif int(number.content) != h_number and 1 <= int(number.content) <= 5:
                    color = Colors.light_red
                    result = f"**–í–´ –ù–ï –£–ì–ê–î–ê–õ–ò..**\n\n**–í–∞—à–µ —á–∏—Å–ª–æ:** {number.content}\n**–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ:** {h_number}"

                else:
                    color = Colors.yellow
                    result = "–û–π! –û—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞..."

                embed = nextcord.Embed(title="–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", description=result, colour=color)
                await ctx.send(embed=embed)

            except ValueError:
                await ctx.send("–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏...")

    @commands.command()
    async def eval(self, ctx, *, content):
        try:
            embed = nextcord.Embed(description=content)
            embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value=eval(content))
            await ctx.send(embed=embed)

        except SyntaxError:
            await ctx.send("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")

        except ZeroDivisionError:
            await ctx.send("–ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å!")

        except Exception as error:
            print(error)

    @commands.command()
    async def weather(self, ctx, a_city):
        try:
            ow_token = config["bot"]["openweather_token"]
            response = requests.get(
                f'http://api.openweathermap.org/data/2.5/weather?q={a_city}&lang=ru&units=metric&appid={ow_token}')
            data = response.json()

            city = data["name"]
            temperature = data["main"]["temp"]
            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]
            time_zone = data["timezone"]

            sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
            sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

            emoji = {
                "Clear": "–Ø—Å–Ω–æ \U00002600",
                "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
                "Rain": "–î–æ–∂–¥—å \U00002614",
                "Drizzle": "–î–æ–∂–¥—å \U00002614",
                "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
                "Snow": "–°–Ω–µ–≥ \U0001F328",
                "Mist": "–¢—É–º–∞–Ω \U0001F32B"
            }

            weather_description = data["weather"][0]["main"]

            if weather_description in emoji:
                wd = emoji[weather_description]
            else:
                wd = "X"

            tz = timezone(timedelta(seconds=time_zone))

            embed = nextcord.Embed(description=f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ **{city}**")
            embed.add_field(name="–î–∞—Ç–∞", value=f"{datetime.datetime.now(tz).strftime('%d/%m/%Y')}")
            embed.add_field(name="–í—Ä–µ–º—è", value=f"{datetime.datetime.now(tz).strftime('%H:%M')}")
            embed.add_field(name="–ü–æ–≥–æ–¥–∞", value=f"{wd}")
            embed.add_field(name="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", value=f"{temperature}¬∞C")
            embed.add_field(name="–í–ª–∞–∂–Ω–æ—Å—Ç—å", value=f"{humidity}%")
            embed.add_field(name="–î–∞–≤–ª–µ–Ω–∏–µ", value=f"{math.ceil(pressure / 1.333)} –º–º.—Ä—Ç.—Å—Ç")
            embed.add_field(name="–í–µ—Ç–µ—Ä", value=f"{wind} –º/—Å")
            embed.add_field(name="–í–æ—Å—Ö–æ–¥", value=f"{sunrise_timestamp}")
            embed.add_field(name="–ó–∞–∫–∞—Ç", value=f"{sunset_timestamp}")

            await ctx.send(embed=embed)

        except Exception as err:
            print(err)
            await ctx.send("–£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


def setup(client):
    client.add_cog(Fun(client))
