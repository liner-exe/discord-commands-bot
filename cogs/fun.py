import nextcord
from nextcord.ext import commands
import random

class Fun(commands.Cog):
	def __init__(self, client):
		self.client = client

	@commands.command()
	async def dice(self, ctx):
		player_dice, bot_dice = [random.randint(2, 12) for i in range (2)]

		emb = nextcord.Embed(
			description="\n".join([f"**–í–∞—à–µ —á–∏—Å–ª–æ**: {player_dice} üé≤",
								   f"–ß–∏—Å–ª–æ **{self.client.user.display_name}**: {bot_dice} üé≤"]),
			colour=0xfc0362
		)
		if player_dice > bot_dice:
			emb.add_field(name = "–†–µ–∑—É–ª—å—Ç–∞—Ç", value = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
		elif bot_dice > player_dice:
			emb.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value="–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏..")
		await ctx.send(embed=emb)

	@commands.command()
	async def roll(self, ctx):
		emojis = "üçéüçäüçêüçãüçâüçáüçìüçíüîîüíéüÖ±Ô∏è7Ô∏è‚É£"

		a = random.choice(emojis)
		b = random.choice(emojis)
		c = random.choice(emojis)

		if (a == b == c):
			slotmachine = nextcord.Embed(title="Slot machine", description=f"üé∞ ({a}|{b}|{c})", colour=0x33ff00)
			slotmachine.add_field(name="–í—ã –ø–æ–±–µ–¥–∏–ª–∏!", value="–í—Å–µ 3 —Å–æ–≤–ø–∞–ª–∏.")
			await ctx.send(embed=slotmachine)

		if (a == b) or (a == c) or (b == c):
			slotmachine = nextcord.Embed(title="Slot machine", description=f"üé∞ ({a}|{b}|{c})", colour=0xffff00)
			slotmachine.add_field(name="–í—ã –ø–æ–±–µ–¥–∏–ª–∏!", value="2 —Å–∏–º–≤–æ–ª–∞ —Å–æ–≤–ø–∞–ª–∏.")
			await ctx.send(embed=slotmachine)

		else:
			slotmachine = nextcord.Embed(title="Slot machine", description=f"üé∞ ({a}|{b}|{c})", colour=0xff0000)
			slotmachine.add_field(name="–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏..", value="–ù–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ.")
			await ctx.send(embed=slotmachine)

	@commands.command()
	async def password(self, ctx, *, lenght : int = None):
		lower = 'abcdefghijklmnopqrstuvwxyz'
		upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
		digits = '0123456789'
		punct = ';;<,>.?!@#$%'

		symb = lower + upper + digits + punct

		if lenght >= 8 and lenght <= 74:
			pass
		elif lenght > 74:
			return await ctx.send("–ü–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 74 —Å–∏–º–≤–æ–ª–æ–≤.")
		else:
			return await ctx.send("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤.")

		ps = ''.join(random.sample(symb, lenght))
		embed = nextcord.Embed(
			title='Password generator',
			description=f'–í–∞—à —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–∞—Ä–æ–ª—å: ``{ps}``',
			timestamp=ctx.message.created_at,
			colour = 0x45fc03
			)
		embed.add_field(name='–í–Ω–∏–º–∞–Ω–∏–µ ‚ö†Ô∏è', value='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö.')
		await ctx.send(embed=embed)

	@commands.command()
	async def coin(self, ctx):
		arr_monetka = ['–û—Ä—ë–ª', '–†–µ—à–∫–∞']
		x_moneta = random.choice(arr_monetka)
		if x_moneta == '–û—Ä—ë–ª':
			emb1=nextcord.Embed(
				description=f"–ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–¥–∫–∏–Ω—É—Ç–∞ –∏ –≤—ã–ø–∞–ª **{x_moneta}**.",
				colour=0xdf03fc
				)
			await ctx.send(embed=emb1)
		else:
			emb2=nextcord.Embed(
				description=f"–ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–¥–∫–∏–Ω—É—Ç–∞ –∏ –≤—ã–ø–∞–ª–∞ **{x_moneta}**.",
				colour=0xdf03fc
				)
			await ctx.send(embed=emb2)

	@commands.command()
	async def say(self, ctx, *, word):
		embed=nextcord.Embed(
			description=f'{word}',
			)
		await ctx.send(embed=embed)
		await ctx.message.delete()

	@commands.command()
	async def eval(self, ctx, *, content):
		try:
			embed = nextcord.Embed(description=content)
			embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value=eval(content))
			await ctx.send(embed=embed)

		except SyntaxError:
			await ctx.send("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")

		except ZeroDivisionError:
			await ctx.send("–ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å!")

		except Exception as error:
			await ctx.send(error)

def setup(client):
	client.add_cog(Fun(client))
